File: Assets\_Project\Core\Audio\AmbientManager.cs
L18: /// 環墁E��マネージャー
L108: /// 環墁E��マネージャーの初期匁E        /// </summary>
L127: source.spatialBlend = 0f; // 環墁E��は通常2D
L214: // 環墁E��辞書
L246: /// 初期環墁E��の開姁E        /// </summary>
L257: /// 環墁E��応じた環墁E��更新
L307: /// 全環墁E��の一時停止
L321: /// 全環墁E��の再開
L332: /// 特定位置での環墁E��マスキング強度を取征E        /// </summary>
L358: /// 環墁E��の遷移
L392: // 新しい環墁E��イヤーを準備
L585: /// 利用可能な環墁E��ソースを取征E        /// </summary>
L588: // 使用中でなぁE��ースを検索
L634: // 時間帯の環墁E��は低優先度で背景に追加
L687: // マスキング篁E��の表示
L703: /// 環墁E��レイヤーの種顁E    /// </summary>
L712: /// アクチE��ブな環墁E��レイヤー
L726: /// 環墁E��コレクション
L746: /// 天候環墁E��コレクション
L758: /// 時間帯環墁E��コレクション
File: Assets\_Project\Core\Audio\AudioManager.cs
L73: // 冁E��状慁E
L116: /// IInitializable実裁E- オーチE��オマネージャーの初期匁E
L161: /// 忁E��なコンポ�Eネント�E検証
L195: // TODO: AudioUpdateCoordinator用のインターフェースを作�E後に有効匁E
L207: // 専用のGameObjectを作�EしてAudioUpdateCoordinatorを追加
L228: /// ゲーム状態に応じたオーチE��オ制御
L244: // 環墁E��の更新
L250: // 動的環墁E��スチE��との連携
L253: // DynamicAudioEnvironment の既存機�Eを活用
L262: /// 環墁E��態に応じた音響制御
L266: // 環墁E��応じたBGM調整
L272: // 環墁E��の調整
L326: /// マスター音量�E設宁E
L335: /// BGM音量�E設宁E
L344: /// 環墁E��音量�E設宁E
L353: /// 効果音音量�E設宁E
L362: /// スチE��ス音響音量�E設宁E
L383: /// スチE��スモード�E強制設宁E
L413: /// オーチE��オシスチE��の一時停止
L423: /// オーチE��オシスチE��の再開
L461: // 個別停止機�EがなぁE��め、�Eて停止
L491: /// アンビエント�Eリュームを取征E
L499: /// エフェクト�Eリュームを取征E
L507: /// カチE��リ別のボリュームを設宁E
L539: // EffectManagerには個別の状態チェチE��機�EがなぁE��め、仮実裁E
L540: // TODO: 個別サウンド�E再生状態トラチE��ング機�Eを追加
L588: // エチE��タでの値変更時に音量を即座に適用
L603: /// 音響シスチE��状態�E構造佁E
File: Assets\_Project\Core\Audio\BGMManager.cs
L16: /// スチE��スゲーム特化�EBGMマネージャー
L58: // 環墁E��応シスチE��
L63: // シスチE��連携
L67: // 冁E��状慁E        private Dictionary<BGMCategory, BGMTrack[]> bgmCategories;
L113: /// オーチE��オソースのセチE��アチE�E
L137: /// オーチE��オソースの共通設宁E        /// </summary>
L148: /// シスチE��参�Eの検索
L160: /// チE��ォルチEGMの開姁E        /// </summary>
L195: /// 環墁E��応じたBGM更新
L203: // 環墁E��化に応じたBGM調整
L252: /// マスター音量�E設宁E        /// </summary>
L307: // 環墁E�E天候�E時間帯に適したトラチE��を優先選抁E            var suitableTracks = FilterTracksByContext(tracks);
L316: /// 現在のコンチE��ストに適したトラチE��をフィルタリング
L349: // 既存�E生を停止
L353: // 新しいトラチE��を設定�E再生
L369: /// スムーズなBGM刁E��替ぁE        /// </summary>
L393: // クロスフェード用ソースに新しいトラチE��を設宁E            crossfadeBGMSource.clip = newTrack.clip;
L415: // ソースを�Eれ替ぁE            var tempSource = primaryBGMSource;
L419: // 古ぁE��ースを停止
L463: /// ターゲチE��音量�E計箁E        /// </summary>
L468: // スチE��スモード時の音量調整
L474: // 環墁E��よる音量調整
L487: // 環墁E��よる調整
L510: /// ソース音量�E更新
L521: /// スチE��ス状態に応じた音量更新
L542: /// 環墁E��化に応じた調整を適用
L548: // リアルタイムでの環墁E��整
L551: // 忁E��に応じて音響フィルターの調整
L557: /// 環墁E��響フィルターの適用
L562: // 実裁E�E具体的な要件に応じて
L584: /// 現在のBGMが�E生中か確誁E        /// </summary>
L591: /// 持E��したBGM名が現在再生中か確誁E        /// </summary>
L597: // BGM名でのマッチング�E�簡略実裁E��E            return currentTrack.clip != null &&
L611: /// 現在のBGMトラチE��惁E��を取征E        /// </summary>
L633: /// BGM名からBGMカチE��リへの変換
L708: /// BGMトラチE��惁E��
L725: [Range(0f, 1f)] public float tensionLevel = 0f;           // こ�E曲が適用される緊張度
L726: public bool allowInStealthMode = true;                    // スチE��ス中に再生可能ぁE
File: Assets\_Project\Core\Audio\Controllers\MaskingEffectController.cs
L16: /// スチE��スゲーム用マスキング効果制御シスチE��
L17: /// AmbientManagerから刁E��された�Eスキング効果専用コントローラー
L46: // シスチE��参�E
L93: /// シスチE��参�Eの検索
L187: // キャチE��ュを更新
L204: /// 全マスキング効果�E停止
L210: // 全AudioSourceのマスキング効果をリセチE��
L235: /// マスキング検�Eの開姁E        /// </summary>
L246: // 協調更新シスチE��に登録�E�イベント駁E���E�E                        coordinator.OnAudioSystemSync += OnAudioSystemSync;
L266: // フォールバック�E�従来の検�EシスチE��
L274: /// マスキング検�Eの停止
L311: /// マスキング検�Eのメインコルーチン
L354: /// AudioSourceが�Eスキング対象として有効かチェチE��
L358: // タグチェチE��
L361: // レイヤーチェチE��
L364: // 音量チェチE���E�非常に小さぁE��は除外！E            bool hasAudibleVolume = audioSource.volume > AudioConstants.MIN_AUDIBLE_VOLUME;
L381: // 最も強ぁE�Eスキング効果を取征E                currentMaskingStrength = trackingAudioSources.Max(source => source.maskingStrength);
L397: // 状態変更時�Eイベント発火
L410: // マスキング音響検�EイベンチE            if (isMaskingActive && maskingSoundDetectedEvent != null)
L425: /// 手動マスキング効果�Eコルーチン
L461: /// AudioSourceの允E�E音量を取征E        /// </summary>
L464: // 允E�E音量�E保存してぁE��ぁE��め、現在の音量を基準とする
L465: // 実際のプロジェクトでは、AudioSourceの允E��ータを保持する仕絁E��が忁E��E            return Mathf.Max(audioSource.volume, 0.1f);
L469: /// AudioSourceの音量を允E��戻ぁE        /// </summary>
L564: // アクチE��ブなマスキングソースの可視化
File: Assets\_Project\Core\Audio\Controllers\TimeAmbientController.cs
L17: /// 時間帯に依存する環墁E��制御シスチE��
L18: /// AmbientManagerから刁E��された時間音響専用コントローラー
L31: [SerializeField, ShowIf("enableAutomaticTimeUpdates")] private float timeUpdateInterval = 60f; // 1刁E��隔でチェチE��
L51: // シスチE��参�E
L96: // フォールバック�E�従来のInvokeRepeating
L161: /// リスナ�Eの検索
L218: /// 全体�E停止
L273: /// 遷移中かどぁE��を取征E        /// </summary>
L281: /// シスチE��時刻に基づく時間帯チェチE��
L298: /// シスチE��時刻から時間帯を判宁E        /// </summary>
L330: // 利用可能なオーチE��オソースを探ぁE            AudioSource availableSource = GetAvailableTimeSource();
L338: // 新しい時間レイヤーを作�E
L345: // 古ぁE��イヤーをフェードアウチE            var layersToRemove = new List<TimeAmbientLayer>(activeTimeLayers);
L382: return timeSources[0]; // 全て使用中の場合�E最初�Eも�Eを使用
L386: /// 時間レイヤーの作�E
L458: /// 全音量�E更新
L481: /// 時間環墁E��レイヤー
L497: // 時間変更が検�Eされた場合�Eみ処琁E            if (syncData.timeChanged && syncData.currentTimeOfDay != currentTimeOfDay)
L503: // スチE��ス状態に応じた音量調整
File: Assets\_Project\Core\Audio\Controllers\WeatherAmbientController.cs
L17: /// AmbientManagerから刁E��された天気音響専用コントローラー
L124: /// リスナ�Eの検索
L140: /// 天気�E変更
L165: /// 全体�E停止
L229: /// 天気�E移のコルーチン
L254: // 新しい天気レイヤーを作�E
L299: return weatherSources[0]; // 全て使用中の場合�E最初�Eも�Eを使用
L303: /// 天気レイヤーの作�E
L377: /// 全音量�E更新
File: Assets\_Project\Core\Audio\DynamicAudioEnvironment.cs
L365: /// デフォルトプリセチE��を作成
File: Assets\_Project\Core\Audio\Services\AudioService.cs
L149: // EffectManagerにはStopEffectがなぁE��め、StopAllEffectsを使用
L157: if (ambientManager != null) ambientManager.PauseAll(); // AmbientManagerにはStopメソチE��がなぁE            if (effectManager != null) effectManager.StopAllEffects();
L238: // EffectManagerでのチェチE��
L242: // BGMManagerでのチェチE��
L255: // BGMの一時停止�E�音量を保存してからゼロに�E�E            if (bgmManager != null)
L261: // アンビエント�E一時停止
L268: // 効果音の停止�E�一時停止ではなく停止�E�E            if (effectManager != null)
L285: // BGMの再開�E�保存された音量で再開�E�E            if (bgmManager != null)
L291: // アンビエント�E再開
L298: // 効果音は停止されたため、新しい音が�E生されるまで征E��E
L323: // 空間音響マネージャーの初期化！Eingleton依存を削除�E�E            // TODO: SpatialAudioManagerがISpatialAudioServiceを実裁E��る忁E��がある
L329: // スチE��スオーチE��オコーチE��ネ�Eターの初期匁E            // TODO: StealthAudioCoordinatorがIStealthAudioServiceを実裁E��る忁E��がある
L358: /// BGMを�E甁E        /// </summary>
L363: // BGMCategoryを使灁E��E��がある
L364: // TODO: bgmNameからBGMCategoryへの変換ロジチE��が忁E��E                // BGM名からBGMCategoryへの変換
L376: /// アンビエントサウンドを更新�E�EmbientManagerにはPlayAmbientメソチE��がなぁE��E        /// </summary>
File: Assets\_Project\Features\Player\Scripts\States\CoverState.cs
L8: /// プレイヤーがカバ�E�E�物陰に隠れてぁE���E�状態を管琁E��るクラス、E    /// </summary>
L16: /// 状態が開始されたときに呼び出されます、E        /// カバ�EシスチE��にカバ�E開始を通知し、姿勢を更新します、E        /// </summary>
L17: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L32: /// 状態が終亁E��たときに呼び出されます、E        /// カバ�EシスチE��にカバ�E終亁E��通知します、E        /// </summary>
L33: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L45: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L49: /// 固定フレームレートで呼び出されます、E        /// カバ�E中の左右移動を処琁E��ます、E        /// </summary>
L50: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L55: // カバ�E中の移動ロジチE���E�覗き見中は移動制限！E            if (!isPeeking && Mathf.Abs(_moveInput.x) > 0.1f)
L66: /// プレイヤーの入力を処琁E��、カバ�E解除めE��き見などのアクションを実行します、E        /// </summary>
L67: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L68: /// <param name="moveInput">移動�E力、E/param>
L69: /// <param name="jumpInput">ジャンプ�E力（この状態ではカバ�E解除に使用�E�、E/param>
L74: // ジャンプ�E力でカバ�E解除
L77: // 後方への標準的なカバ�E解除
File: Assets\_Project\Features\Player\Scripts\States\JumpingState.cs
L7: /// プレイヤーのジャンプ状態を管琁E��るクラス、E    /// </summary>
L16: /// 状態が開始されたときに呼び出されます、E        /// プレイヤーに上方向�E速度を与えてジャンプさせます、E        /// </summary>
L17: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L30: /// 状態が終亁E��たときに呼び出されます、E        /// </summary>
L31: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L38: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L49: /// 固定フレームレートで呼び出されます、E        /// 重力を適用し、�Eレイヤーを移動させます、E        /// </summary>
L50: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L60: /// プレイヤーの入力を処琁E��ます。（この状態では入力�E無視されます！E        /// </summary>
L61: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L62: /// <param name="moveInput">移動�E力、E/param>
L63: /// <param name="jumpInput">ジャンプ�E力、E/param>
File: Assets\_Project\Features\Player\Scripts\States\ProneState.cs
L6: /// プレイヤーの伏せ�E�匍匐）状態を管琁E��るクラス、E    /// </summary>
L16: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L36: /// 状態が終亁E��たときに呼び出されます、E        /// キャラクターの高さを�Eの高さに戻します、E        /// </summary>
L37: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L52: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L56: /// 固定フレームレートで呼び出されます、E        /// 入力に基づぁE��キャラクターの移動を処琁E��ます、E        /// </summary>
L57: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L75: /// プレイヤーの入力を処琁E��、他�E状態への遷移を判断します、E        /// </summary>
L76: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L77: /// <param name="moveInput">移動�E力、E/param>
L78: /// <param name="jumpInput">ジャンプ�E力（この状態では立ち上がりに使用�E�、E/param>
L83: // ジャンプ�E力で匍匐解除�E�立ち上がり！E            if (jumpInput)
L99: // 障害物がある場合�Eしゃがみ状態へ
L113: /// プレイヤーが立ち上がれるかどぁE���E�頭上に障害物がなぁE���E�を確認します、E        /// </summary>
L114: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L115: /// <returns>立ち上がれる場合�Etrue、そぁE��なぁE��合�Efalse、E/returns>
L126: /// プレイヤーがしめE��み状態になれるかどぁE��を確認します、E        /// </summary>
L127: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L128: /// <returns>しゃがめる場合�Etrue、そぁE��なぁE��合�Efalse、E/returns>
File: Assets\_Project\Features\Player\Scripts\States\RollingState.cs
L9: /// プレイヤーのローリング状態を管琁E��るクラス、E    /// こ�E状態では、�Eレイヤーは一定時間前方に移動し、外部からの入力を受け付けません、E    /// </summary>
L16: /// 状態が開始されたときに呼び出されます、E        /// ローリングのタイマ�Eを開始し、アニメーションをトリガーします、E        /// </summary>
L17: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L44: /// 状態が終亁E��たときに呼び出されます、E        /// </summary>
L45: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L62: /// 毎フレーム呼び出されます、E        /// ローリングによる移動�E琁E��適用します、E        /// </summary>
L63: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L79: /// 固定フレームレートで呼び出されます。物琁E��算�E更新に使用されます、E        /// こ�E状態では使用されません、E        /// </summary>
L80: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L87: /// プレイヤーの入力を処琁E��ます、E        /// ローリング中は入力を無視します、E        /// </summary>
L88: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L89: /// <param name="moveInput">移動�E力、E/param>
L90: /// <param name="jumpInput">ジャンプ�E力、E/param>
L97: /// ローリングの継続時間を管琁E��、終亁E��に歩行状態に遷移します、E        /// </summary>
L98: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
File: Assets\_Project\Features\Player\Scripts\States\WalkingState.cs
L6: /// プレイヤーの歩行状態を管琁E��るクラス、E    /// </summary>
L14: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L24: /// 状態が終亁E��たときに呼び出されます、E        /// 移動�E力をリセチE��します、E        /// </summary>
L25: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L33: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L39: /// 固定フレームレートで呼び出されます、E        /// 入力に基づぁE��キャラクターの移動を処琁E��ます、E        /// </summary>
L40: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L60: /// プレイヤーの入力を処琁E��、他�E状態への遷移を判断します、E        /// </summary>
L61: /// <param name="stateMachine">プレイヤーのスチE�Eト�Eシン、E/param>
L62: /// <param name="moveInput">移動�E力、E/param>
L63: /// <param name="jumpInput">ジャンプ�E力、E/param>
L80: // State transitions - スプリント�E力でRunning状態に遷移
