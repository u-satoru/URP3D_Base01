using UnityEngine;
using _Project.Core;
using asterivo.Unity60.Core.Audio.Interfaces;
using asterivo.Unity60.Core;
using asterivo.Unity60.Core.Debug;

namespace _Project.Tests.Core.Services
{
    /// <summary>
    /// StealthAudioCoordinator„ÅÆServiceLocatorÁôªÈå≤„ÉÜ„Çπ„ÉàÁî®„Çπ„ÇØ„É™„Éó„Éà
    /// Step 3.4„ÅÆÊ§úË®ºÁî®
    /// </summary>
    public class StealthAudioCoordinatorServiceLocatorTest : MonoBehaviour
    {
        [Header("Test Controls")]
        [SerializeField] private bool runTestOnStart = true;

        private void Start()
        {
            if (runTestOnStart)
            {
                TestServiceLocatorIntegration();
            }
        }

        [ContextMenu("Test ServiceLocator Integration")]
        public void TestServiceLocatorIntegration()
        {
            EventLogger.Log("[TEST] Starting StealthAudioCoordinator ServiceLocator integration test");

            // ServiceLocator„Åã„ÇâIStealthAudioService„ÇíÂèñÂæó
            var stealthAudioService = ServiceLocator.GetService<IStealthAudioService>();

            if (stealthAudioService != null)
            {
                EventLogger.Log("[TEST] ‚úÖ Successfully retrieved IStealthAudioService from ServiceLocator");
                
                // Âü∫Êú¨Ê©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà
                TestBasicFunctionality(stealthAudioService);
            }
            else
            {
                EventLogger.LogError("[TEST] ‚ùå Failed to retrieve IStealthAudioService from ServiceLocator");
            }
        }

        private void TestBasicFunctionality(IStealthAudioService service)
        {
            try
            {
                // CreateFootstep„ÉÜ„Çπ„Éà
                service.CreateFootstep(Vector3.zero, 0.5f, "concrete");
                EventLogger.Log("[TEST] ‚úÖ CreateFootstep method works");

                // SetEnvironmentNoiseLevel„ÉÜ„Çπ„Éà
                service.SetEnvironmentNoiseLevel(0.3f);
                EventLogger.Log("[TEST] ‚úÖ SetEnvironmentNoiseLevel method works");

                // EmitDetectableSound„ÉÜ„Çπ„Éà
                service.EmitDetectableSound(Vector3.forward, 5f, 0.7f, "test");
                EventLogger.Log("[TEST] ‚úÖ EmitDetectableSound method works");

                // PlayDistraction„ÉÜ„Çπ„Éà
                service.PlayDistraction(Vector3.back, 3f);
                EventLogger.Log("[TEST] ‚úÖ PlayDistraction method works");

                // SetAlertLevelMusic„ÉÜ„Çπ„Éà
                service.SetAlertLevelMusic(AlertLevel.Low);
                EventLogger.Log("[TEST] ‚úÖ SetAlertLevelMusic method works");

                // ApplyAudioMasking„ÉÜ„Çπ„Éà
                service.ApplyAudioMasking(0.4f);
                EventLogger.Log("[TEST] ‚úÖ ApplyAudioMasking method works");

                EventLogger.Log("[TEST] üéâ All basic functionality tests passed!");
            }
            catch (System.Exception ex)
            {
                EventLogger.LogError($"[TEST] ‚ùå Basic functionality test failed: {ex.Message}");
            }
        }
    }
}