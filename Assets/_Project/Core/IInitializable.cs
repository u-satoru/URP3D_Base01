namespace asterivo.Unity60.Core
{
    /// <summary>
    /// システム初期化契約インターフェース
    ///
    /// Unity 6における3層アーキテクチャシステムの統一的な初期化を管理するため、
    /// 優先度ベースの初期化順序制御と状態管理機能を提供します。
    /// SystemInitializerクラスと連携し、依存関係を考慮した安全な起動シーケンスを実現します。
    ///
    /// 【設計原則】
    /// - 優先度による決定的な初期化順序（低い値ほど先に実行）
    /// - べき等性の保証（複数回呼び出しでも安全）
    /// - 状態透明性（IsInitializedによる外部監視可能）
    /// - 例外安全性（初期化失敗時の適切なエラーハンドリング）
    ///
    /// 【実装ガイドライン】
    /// - Initialize()メソッドは冪等（複数回実行安全）である必要がある
    /// - Priorityは定数値を返し、実行時変更は避ける
    /// - 依存関係のあるシステムは適切な優先度設定で順序制御
    /// - 初期化失敗時はIsInitialized=falseを維持
    ///
    /// 【使用例】
    /// - ServiceLocator基盤システム: Priority = 0（最優先）
    /// - AudioManager: Priority = 100
    /// - UI関連システム: Priority = 200（後続処理）
    /// </summary>
    public interface IInitializable
    {
        /// <summary>
        /// 初期化実行優先度
        ///
        /// SystemInitializerによる自動初期化時の実行順序を決定する優先度値です。
        /// 数値が小さいほど早期に初期化され、依存関係の解決に使用されます。
        ///
        /// 【優先度ガイドライン】
        /// - 0-99: Core基盤システム（ServiceLocator、FeatureFlags等）
        /// - 100-199: Feature層サービス（AudioManager、InputManager等）
        /// - 200-299: Template層システム（UIManager、SceneManager等）
        /// - 300-399: アプリケーション固有システム
        ///
        /// 【実装注意】
        /// - 実行時変更不可（定数値を返却）
        /// - 同一優先度の場合、実行順序は不定
        /// - 負の値は予約済み（システム内部使用）
        /// </summary>
        int Priority { get; }

        /// <summary>
        /// システム初期化実行メソッド
        ///
        /// システムの初期化処理を実行し、必要なリソース確保、
        /// 依存関係の解決、初期状態の設定を行います。
        ///
        /// 【実装要件】
        /// - 冪等性: 複数回呼び出しても安全であること
        /// - 例外安全: 初期化失敗時は適切な例外をスロー
        /// - 状態管理: 成功時にIsInitialized=trueを設定
        /// - 依存解決: より低い優先度システムの初期化完了を前提
        ///
        /// 【実行タイミング】
        /// - アプリケーション起動時（RuntimeInitializeOnLoadMethod）
        /// - SystemInitializer.InitializeAll()による一括初期化
        /// - 手動初期化（開発・テスト時）
        ///
        /// 【エラーハンドリング】
        /// 初期化失敗時は例外をスローし、IsInitialized=falseを保持
        /// </summary>
        void Initialize();

        /// <summary>
        /// 初期化完了状態フラグ
        ///
        /// システムの初期化処理が正常完了したかを示す読み取り専用プロパティです。
        /// 外部システムからの初期化状態監視、依存関係チェック、
        /// デバッグ情報表示に使用されます。
        ///
        /// 【状態遷移】
        /// - 初期状態: false（未初期化）
        /// - Initialize()成功後: true（初期化完了）
        /// - 初期化失敗時: false（エラー状態）
        ///
        /// 【用途】
        /// - SystemInitializerでの初期化完了確認
        /// - 依存システムからの準備状態チェック
        /// - デバッグコンソールでの状態監視
        /// - ユニットテストでの検証
        ///
        /// 【実装注意】
        /// - スレッドセーフな実装が推奨
        /// - Initialize()実行前はfalseを返却
        /// - 初期化処理中もfalseを返却（完了時のみtrue）
        /// </summary>
        bool IsInitialized { get; }
    }
}
