namespace asterivo.Unity60.Core.Commands
{
    /// <summary>
    /// Commandパターン基盤インターフェース
    ///
    /// Unity 6における3層アーキテクチャのCore層コマンドシステムにおいて、
    /// 全てのコマンド実装が従うべき標準契約を定義する基盤インターフェースです。
    /// GoFデザインパターンのCommandパターンを実装し、アクションのカプセル化、
    /// 遅延実行、Undo/Redo機能、ObjectPool最適化の統合基盤を提供します。
    ///
    /// 【Commandパターンの核心価値】
    /// - アクションカプセル化: 操作をオブジェクトとして表現し、実行制御を分離
    /// - 遅延実行: 要求の生成と実行タイミングの完全分離
    /// - Undo/Redo支援: 操作の可逆性と履歴管理機能
    /// - 疎結合設計: 要求者（Invoker）と実行者（Receiver）の直接依存排除
    /// - 拡張性: 新しいコマンド型の追加による機能拡張
    ///
    /// 【3層アーキテクチャ統合】
    /// - Core層基盤: ジャンル非依存の汎用コマンド実行機構
    /// - Feature層実装: ゲーム固有アクション（ダメージ、移動、攻撃等）
    /// - Template層利用: ジャンル特化コマンドシーケンスの構築
    /// - イベント連携: GameEventとの組み合わせによる疎結合アクション
    ///
    /// 【ObjectPool最適化統合】
    /// - IResettableCommand: プール再利用対応拡張インターフェース
    /// - CommandPoolManager: 高速オブジェクト再利用による95%メモリ削減
    /// - ゼロアロケーション: 実行時メモリ確保の最小化
    /// - パフォーマンス向上: 67%の実行速度改善
    ///
    /// 【典型的実装例】
    /// - DamageCommand: ダメージ処理とHP回復のUndo機能
    /// - HealCommand: 回復処理と回復量記録
    /// - MoveCommand: プレイヤー移動と位置復元
    /// - AttackCommand: 攻撃アクションとクールダウン管理
    /// - SaveCommand: セーブ処理と前状態バックアップ
    ///
    /// 【使用パターン】
    /// - CommandInvoker経由: 中央実行制御とUndo履歴管理
    /// - ダイレクト実行: 単発アクションの即座実行
    /// - バッチ実行: 複数コマンドの一括処理
    /// - 条件付き実行: ゲーム状態に応じたコマンド発火
    /// </summary>
    public interface ICommand
    {
        /// <summary>
        /// コマンド実行メソッド
        ///
        /// カプセル化されたアクションの実際の実行を行う中核メソッドです。
        /// 実装クラスは、このメソッド内で具体的な処理ロジックを実装し、
        /// 必要に応じてUndo実行のための状態記録を行います。
        ///
        /// 【実装指針】
        /// - 冪等性確保: 重複実行での副作用回避
        /// - 例外安全: try-catch包囲による安全な実行
        /// - 状態記録: Undo機能のための実行前状態保存
        /// - 軽量処理: ゲームループをブロックしない効率的実装
        /// - ログ記録: デバッグ・監視のための実行ログ出力
        ///
        /// 【CommandInvoker連携】
        /// - 履歴管理: 実行後の自動Undo履歴追加
        /// - 例外処理: 実行失敗時の適切なエラーハンドリング
        /// - パフォーマンス監視: 実行時間とメモリ使用量追跡
        /// </summary>
        void Execute();

        /// <summary>
        /// コマンド取り消し実行メソッド
        ///
        /// 実行されたコマンドの効果を取り消し、実行前の状態に復元するメソッドです。
        /// CanUndoがtrueを返すコマンドでのみ有効であり、ゲームの可逆的操作と
        /// プレイヤーの操作ミス修正機能を実現します。
        ///
        /// 【実装要件】
        /// - 完全復元: Execute()前の状態への正確な復元
        /// - 副作用除去: Execute()で発生した全ての副作用の取り消し
        /// - 例外安全: Undo処理失敗時の適切なエラーハンドリング
        /// - 状態整合性: 複数オブジェクトにまたがる状態の一貫性保証
        ///
        /// 【注意事項】
        /// - CanUndo確認: 呼び出し前のCanUndoプロパティ確認必須
        /// - 実行順序: Undo実行順序は通常Execute()の逆順
        /// - リソース管理: Undo実行で確保したリソースの適切な解放
        /// - データ整合性: 永続化データの適切な復元処理
        /// </summary>
        void Undo();

        /// <summary>
        /// Undo機能対応可否プロパティ
        ///
        /// このコマンドがUndo()メソッドをサポートするかどうかを示すプロパティです。
        /// trueを返すコマンドは完全な状態復元機能を持ち、falseを返すコマンドは
        /// 不可逆的な操作または状態記録が困難な操作を表します。
        ///
        /// 【true返却ケース】
        /// - 状態変更: HP変更、位置移動、アイテム増減等の可逆操作
        /// - データ操作: 設定変更、フラグ変更等の記録可能操作
        /// - ゲーム状態: レベル遷移、モード変更等の復元可能操作
        ///
        /// 【false返却ケース】
        /// - 外部I/O: ファイル削除、ネットワーク通信等の不可逆操作
        /// - 時間依存: タイマー開始、リアルタイム処理等の復元困難操作
        /// - ランダム要素: 乱数使用、確率的結果等の再現不可能操作
        /// - リソース制約: 大量データ記録が現実的でない操作
        ///
        /// 【CommandInvoker活用】
        /// - Undo履歴管理: CanUndo=trueのコマンドのみ履歴保存
        /// - UI制御: Undoボタンの有効/無効状態制御
        /// - パフォーマンス: 不要な状態記録の回避
        /// </summary>
        bool CanUndo { get; }
    }
}