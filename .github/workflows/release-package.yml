name: Release Package

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

jobs:
  prepare-release:
    name: Prepare Release Assets
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Get Version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Generate Changelog
      id: changelog
      run: |
        echo "Generating changelog..."
        
        # Get previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.get_version.outputs.version }}" | head -1)
        
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "Previous tag: $PREVIOUS_TAG"
        echo "Current tag: ${{ steps.get_version.outputs.version }}"
        
        # Generate changelog
        cat > CHANGELOG_TEMP.md << 'EOF'
        # Release Notes
        
        ## What's Changed
        EOF
        
        # Get commits since last tag
        git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG_TEMP.md
        
        echo "" >> CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        echo "## Technical Details" >> CHANGELOG_TEMP.md
        echo "- Unity Version: 6000.0.42f1" >> CHANGELOG_TEMP.md
        echo "- Render Pipeline: Universal Render Pipeline (URP)" >> CHANGELOG_TEMP.md
        echo "- Target Platforms: Windows, macOS, iOS, Android" >> CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        
        echo "## Installation" >> CHANGELOG_TEMP.md
        echo "1. Download the Unity package from the assets below" >> CHANGELOG_TEMP.md
        echo "2. Import into your Unity project" >> CHANGELOG_TEMP.md
        echo "3. Follow the setup guide in the documentation" >> CHANGELOG_TEMP.md
        
        # Set output for later steps
        {
          echo 'changelog<<EOF'
          cat CHANGELOG_TEMP.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Create Unity Package
      run: |
        echo "Creating Unity package..."
        
        # Create package structure
        mkdir -p package-temp/Assets
        mkdir -p package-temp/ProjectSettings
        
        # Copy project assets
        cp -r Assets/_Project package-temp/Assets/
        cp -r Assets/Plugins package-temp/Assets/ || echo "No Plugins directory found"
        
        # Copy essential project settings
        cp ProjectSettings/InputManager.asset package-temp/ProjectSettings/ || echo "InputManager.asset not found"
        cp ProjectSettings/TagManager.asset package-temp/ProjectSettings/ || echo "TagManager.asset not found"
        cp ProjectSettings/LayerCollisionMatrix.asset package-temp/ProjectSettings/ || echo "LayerCollisionMatrix.asset not found"
        cp ProjectSettings/Physics2DSettings.asset package-temp/ProjectSettings/ || echo "Physics2DSettings.asset not found"
        cp ProjectSettings/DynamicsManager.asset package-temp/ProjectSettings/ || echo "DynamicsManager.asset not found"
        
        # Copy documentation
        cp CLAUDE.md package-temp/ || echo "CLAUDE.md not found"
        cp README.md package-temp/ || echo "README.md not found"
        
        # Create package manifest
        cat > package-temp/package.json << EOF
        {
          "name": "com.urp3d.base-template",
          "displayName": "URP3D Base Template",
          "version": "${{ steps.get_version.outputs.version }}",
          "description": "A comprehensive Unity 3D game template with event-driven architecture and command pattern implementation.",
          "unity": "2023.3",
          "unityRelease": "0f1",
          "dependencies": {
            "com.unity.render-pipelines.universal": "17.0.3",
            "com.unity.inputsystem": "1.11.2",
            "com.unity.cinemachine": "2.10.1",
            "com.unity.ai.navigation": "2.0.4",
            "com.unity.test-framework": "1.4.5"
          },
          "keywords": [
            "template",
            "3d",
            "urp",
            "event-driven",
            "command-pattern",
            "scriptable-objects"
          ],
          "author": {
            "name": "URP3D Base Template",
            "url": "https://github.com/your-org/urp3d-base01"
          }
        }
        EOF
        
        # Create archive
        cd package-temp
        zip -r ../URP3D_Base_Template_${{ steps.get_version.outputs.version }}.zip .
        cd ..
        
        # Create UnityPackage (simplified approach)
        zip -r URP3D_Base_Template_${{ steps.get_version.outputs.version }}.unitypackage package-temp/Assets/
    
    - name: Generate Documentation Package
      run: |
        echo "Generating documentation package..."
        
        mkdir -p docs-package
        
        # Copy all documentation
        cp -r Assets/_Project/Docs docs-package/
        cp CLAUDE.md docs-package/
        cp README.md docs-package/
        
        # Create documentation index
        cat > docs-package/INDEX.md << 'EOF'
        # URP3D Base Template Documentation
        
        ## Getting Started
        - [Project Overview](CLAUDE.md)
        - [Player Setup Guide](Docs/Unity_Player_Setup_Guide.md)
        - [README](README.md)
        
        ## Architecture Documentation
        - [Core Implementation Tasks](Docs/Work/Core_Implementation_Tasks.md)
        - [TODO Implementation Status](Docs/Work/TODO_Core_Implementation.md)
        
        ## System Specifications
        - [Stealth Audio System](Docs/StealthAudioSystemSpecification.md)
        - [SDD Implementation Guide](Docs/SDD_Markdown作成実践ガイド.md)
        
        ## Version Information
        - Template Version: ${{ steps.get_version.outputs.version }}
        - Unity Version: 6000.0.42f1
        - Release Date: $(date +'%Y-%m-%d')
        EOF
        
        # Create documentation archive
        zip -r Documentation_${{ steps.get_version.outputs.version }}.zip docs-package/
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: URP3D Base Template ${{ steps.get_version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: ${{ github.event.inputs.draft || false }}
        prerelease: ${{ github.event.inputs.prerelease || false }}
    
    - name: Upload Unity Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./URP3D_Base_Template_${{ steps.get_version.outputs.version }}.zip
        asset_name: URP3D_Base_Template_${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
    
    - name: Upload UnityPackage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./URP3D_Base_Template_${{ steps.get_version.outputs.version }}.unitypackage
        asset_name: URP3D_Base_Template_${{ steps.get_version.outputs.version }}.unitypackage
        asset_content_type: application/octet-stream
    
    - name: Upload Documentation
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Documentation_${{ steps.get_version.outputs.version }}.zip
        asset_name: Documentation_${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip

  build-platforms:
    name: Build for Multiple Platforms
    runs-on: ubuntu-latest
    needs: prepare-release
    
    strategy:
      matrix:
        target: [StandaloneWindows64, StandaloneOSX, iOS, Android]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: Library
        key: Library-${{ matrix.target }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.target }}-
          Library-
    
    - name: Build Unity Project
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        unityVersion: '6000.0.42f1'
        targetPlatform: ${{ matrix.target }}
        buildName: URP3D_Base_Demo
        buildsPath: builds
        customParameters: |
          -Development
          -ScriptingBackend Mono
    
    - name: Compress Build
      run: |
        cd builds/${{ matrix.target }}
        zip -r ../../Demo_Build_${{ matrix.target }}_${{ needs.prepare-release.outputs.version }}.zip .
    
    - name: Upload Build Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.prepare-release.outputs.upload_url }}
        asset_path: ./Demo_Build_${{ matrix.target }}_${{ needs.prepare-release.outputs.version }}.zip
        asset_name: Demo_Build_${{ matrix.target }}_${{ needs.prepare-release.outputs.version }}.zip
        asset_content_type: application/zip

  notify-release:
    name: Notify Release Complete
    runs-on: ubuntu-latest
    needs: [prepare-release, build-platforms]
    if: always()
    
    steps:
    - name: Check Release Status
      run: |
        if [ "${{ needs.prepare-release.result }}" == "success" ] && [ "${{ needs.build-platforms.result }}" == "success" ]; then
          echo "✅ Release ${{ needs.prepare-release.outputs.version }} completed successfully"
          echo "STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Release ${{ needs.prepare-release.outputs.version }} failed"
          echo "STATUS=failed" >> $GITHUB_ENV
        fi
    
    - name: Create Success Comment
      if: env.STATUS == 'success'
      uses: actions/github-script@v6
      with:
        script: |
          const release_url = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${{ needs.prepare-release.outputs.version }}`;
          const message = `🎉 **Release ${{ needs.prepare-release.outputs.version }} is now available!**
          
          📦 **Available Downloads:**
          - Unity Package (.zip)
          - UnityPackage (.unitypackage)
          - Documentation Package
          - Demo Builds (Windows, macOS, iOS, Android)
          
          🔗 **Download:** ${release_url}
          
          🚀 This release includes all the latest features and improvements to the URP3D Base Template.`;
          
          // Post to latest commit if available
          if (context.sha) {
            try {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: message
              });
            } catch (error) {
              console.log('Could not create commit comment:', error.message);
            }
          }
    
    - name: Generate Release Summary
      run: |
        echo "# Release Summary" > release-summary.md
        echo "**Version:** ${{ needs.prepare-release.outputs.version }}" >> release-summary.md
        echo "**Status:** ${{ env.STATUS }}" >> release-summary.md
        echo "**Date:** $(date)" >> release-summary.md
        echo "" >> release-summary.md
        
        if [ "${{ env.STATUS }}" == "success" ]; then
          echo "## ✅ Successfully Created:" >> release-summary.md
          echo "- Unity Package Template" >> release-summary.md
          echo "- Documentation Package" >> release-summary.md
          echo "- Demo Builds for all platforms" >> release-summary.md
          echo "- GitHub Release with changelog" >> release-summary.md
        else
          echo "## ❌ Release Failed" >> release-summary.md
          echo "Check the workflow logs for details." >> release-summary.md
        fi
        
        echo "" >> release-summary.md
        echo "## Next Steps" >> release-summary.md
        echo "- Test the released packages" >> release-summary.md
        echo "- Update any external documentation" >> release-summary.md
        echo "- Announce the release to the community" >> release-summary.md
    
    - name: Upload Release Summary
      uses: actions/upload-artifact@v3
      with:
        name: release-summary
        path: release-summary.md
        retention-days: 30